<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>https://xuliwei.xzy/</link>
    <description>Recent content on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 18 Mar 2022 15:36:21 +0800</lastBuildDate><atom:link href="https://xuliwei.xzy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>聊聊幂等</title>
      <link>https://xuliwei.xzy/posts/idempotence/</link>
      <pubDate>Fri, 18 Mar 2022 15:36:21 +0800</pubDate>
      
      <guid>https://xuliwei.xzy/posts/idempotence/</guid>
      
        <description>什么是幂等 日常的系统设计中，一个重要的关注点就是如何保证系统操作的幂等性。幂等本来是数学上的概念，在计算机领域一般是指请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的。这里的请求可能是一个 HTTP 请求，也可能是服务之间的 RPC 请求，</description>
      
    </item>
    
    <item>
      <title>缓存与数据库的一致性</title>
      <link>https://xuliwei.xzy/posts/consistency-between-cache-and-db/</link>
      <pubDate>Fri, 11 Feb 2022 21:31:41 +0800</pubDate>
      
      <guid>https://xuliwei.xzy/posts/consistency-between-cache-and-db/</guid>
      
        <description>对于读多写少的场景，缓存是提升系统读性能的一个常见技术。而数据系统一旦引入了新的组件，必然会带来数据一致性的问题。这里不考虑强一致性，强一致性带来的性能问题在高并发的场景下是不可接受的，因此这里说的是最终一致性。 对于缓存和数据库一起使用的模</description>
      
    </item>
    
    <item>
      <title>《架构整洁之道》读书笔记</title>
      <link>https://xuliwei.xzy/posts/clean-architecture-note/</link>
      <pubDate>Wed, 08 Dec 2021 15:36:21 +0800</pubDate>
      
      <guid>https://xuliwei.xzy/posts/clean-architecture-note/</guid>
      
        <description>R.C.Martin 的这本架构书讨论的是如何设计一个架构，并不会涉及到实现层面的东西，比如语言、框架、缓存和数据库之类的东西。这些在他的理念中属于具体的细节，不是架构应该考虑的东西。在他看来，架构其实就是设计。 一句话总结好的软件架构：围绕业务逻辑和用例而非技</description>
      
    </item>
    
    <item>
      <title>设计短链接</title>
      <link>https://xuliwei.xzy/posts/design-short-url/</link>
      <pubDate>Sun, 05 Dec 2021 15:42:21 +0800</pubDate>
      
      <guid>https://xuliwei.xzy/posts/design-short-url/</guid>
      
        <description>短网址的实现原理是通过建立一个短地址和长地址的一一映射关系，然后短链服务器在接受请求时通过 301 或 302 重定向到长地址来实现（一般用临时重定向302）。 1. Hash 算法 很容易想到的就是通过 hash 将一个长字符串转到一个固定的短字符串。这里不需要 MD5 和 SHA 这些复杂的哈</description>
      
    </item>
    
    <item>
      <title>设计分布式唯一ID</title>
      <link>https://xuliwei.xzy/posts/design-distribution-unique-id/</link>
      <pubDate>Fri, 03 Dec 2021 18:36:21 +0800</pubDate>
      
      <guid>https://xuliwei.xzy/posts/design-distribution-unique-id/</guid>
      
        <description>一般而言，设计分布式唯一ID的话，会有这几个要求： 全局唯一 趋势递增，这样对于 InnoDB 这样的 B+Tree 存储数据的可以保证写入的性能 单调递增，这样可以用作事务版本号、IM增量消息和排序等 不能连续，避免信息泄露，比如被爬虫顺序下载、用户ID和订单ID之类的被别</description>
      
    </item>
    
    <item>
      <title>Java 并发——ThreadLocal 总结</title>
      <link>https://xuliwei.xzy/posts/java-threadlocal/</link>
      <pubDate>Mon, 16 Mar 2020 15:36:21 +0800</pubDate>
      
      <guid>https://xuliwei.xzy/posts/java-threadlocal/</guid>
      
        <description>ThreadLocal 是 Java 中使用的比较多的一个跟线程相关的类，它的主要作用是用于保存线程专属的一些数据。这在一些涉及到线程的场景上很有用，比如维护一个请求完整生命周期的一些信息等。 用法 ThreadLocal 的用法非常简单，它封装了一个 get 和 set 方法，在当前线程内，可以 get 到之前 set 进的值</description>
      
    </item>
    
    <item>
      <title>Java 并发——Thread 总结</title>
      <link>https://xuliwei.xzy/posts/java-thread/</link>
      <pubDate>Mon, 02 Mar 2020 17:56:31 +0800</pubDate>
      
      <guid>https://xuliwei.xzy/posts/java-thread/</guid>
      
        <description>1. Thread 、Runable 和 Callable Java 中的 Thread 类表示一个线程。它实现了 Runnable 接口，该接口是个 @FunctionalInterface，仅有一个 public abstract void run() 方法。有两种方式构建一个 Thread 类： 实现 Runnable 接口，并将其实现传入一个 Thread 类； 继承 Thread 类，覆写其中的 run() 方法。 推荐第一种方式</description>
      
    </item>
    
    <item>
      <title>聊聊 URL 编码</title>
      <link>https://xuliwei.xzy/posts/url-encode/</link>
      <pubDate>Thu, 02 May 2019 23:36:21 +0800</pubDate>
      
      <guid>https://xuliwei.xzy/posts/url-encode/</guid>
      
        <description>这里先说下 URL 和 URI 的区别，因为下面提到的一些方法的命名会用到 URI。 URL 是浏览器寻找信息时所需的资源位置，适用于 HTTP 和其他协议。 URI 是一类更通用的资源标识符，URL 实际上是它的一个子集。URI 是一个通用的概念，由两个主要的子集 URL 和 URN 构成，URL 是通</description>
      
    </item>
    
    <item>
      <title>聊聊 Base64 编码</title>
      <link>https://xuliwei.xzy/posts/base64/</link>
      <pubDate>Tue, 16 Apr 2019 15:36:21 +0800</pubDate>
      
      <guid>https://xuliwei.xzy/posts/base64/</guid>
      
        <description>Base64 编码是日常的编程中经常用到的编码方案之一，尤其是在传输信息的时候。有些初学者搞不清楚它和普通字符串的区别，也有些初学者把它和文本加密混淆。这里对 Base64 编码做一个详细的介绍。 可打印字符和控制字符 介绍 Base64 编码之前，先介绍下什么是可打印字符。可打印字</description>
      
    </item>
    
    <item>
      <title>依赖倒置、控制反转和依赖注入</title>
      <link>https://xuliwei.xzy/posts/dip-ioc-di/</link>
      <pubDate>Mon, 08 Apr 2019 12:10:21 +0800</pubDate>
      
      <guid>https://xuliwei.xzy/posts/dip-ioc-di/</guid>
      
        <description>依赖倒置 依赖倒置原则（Dependency inversion principle，DIP）也可以翻译成依赖反转原则，是一个面向对象的设计原则，旨在解耦模块之间的关系。该原则要求： 高层模块不再依赖于低层模块，它们都依赖于抽象； 抽象不应该依赖于具体细节，细节应该</description>
      
    </item>
    
    <item>
      <title>聊聊 HTTP 缓存</title>
      <link>https://xuliwei.xzy/posts/http-cache/</link>
      <pubDate>Sat, 05 Jan 2019 15:36:21 +0800</pubDate>
      
      <guid>https://xuliwei.xzy/posts/http-cache/</guid>
      
        <description>缓存是计算机世界中最常见的概念，从底层的 CPU 的缓存到应用层面的 Web 服务器缓存以及分布式的 Redis 和 Memcached 缓存。缓存存在的作用主要是为了以较小的空间代价提升较大的时间节省，当然前提是类似于二八原则这样的原理生效并且加以较好的策略来配置缓存。 本文谈的缓存是实</description>
      
    </item>
    
    <item>
      <title>异常和返回值</title>
      <link>https://xuliwei.xzy/posts/exception-or-error-code/</link>
      <pubDate>Sat, 03 Nov 2018 14:10:21 +0800</pubDate>
      
      <guid>https://xuliwei.xzy/posts/exception-or-error-code/</guid>
      
        <description>在开发过程中，经常要对一些可能出错的代码进行掌控，比如某个变量有可能为 null、调用资源时有可能会遇到问题以及调用类库时出现错误等等。平时常用的方法大概有三种： 通过 if...else 语句对可能出现的情况进行判断，并通过返回值给出信息； 抛出异常； 使用断言。 下</description>
      
    </item>
    
    <item>
      <title>对象池模式</title>
      <link>https://xuliwei.xzy/posts/object-pool-pattern/</link>
      <pubDate>Tue, 10 Apr 2018 22:36:21 +0800</pubDate>
      
      <guid>https://xuliwei.xzy/posts/object-pool-pattern/</guid>
      
        <description>对象池模式是一种 creational 设计模式。该模式下，池中所包含的对象将不再是每次需要时创建，使用完毕后销毁，而是初始化好后放入池中等待使用。使用该池的 client 每次需要时都会向对象池请求一个对象，在上面进行一些操作，使用完之后返回给对象池。这个过程可以是手动执行</description>
      
    </item>
    
    <item>
      <title>确保 .NET 程序在系统中只有一个实例</title>
      <link>https://xuliwei.xzy/posts/keep-one-instance-on-windows/</link>
      <pubDate>Wed, 21 Mar 2018 15:36:21 +0800</pubDate>
      
      <guid>https://xuliwei.xzy/posts/keep-one-instance-on-windows/</guid>
      
        <description>保证一个应用程序在系统中只有一个运行的方式就是用一些特殊的信息来判定唯一性。一种思路是通过线程的信息，比如名字等来判断，另一种是通过线程同步互斥信号来达到目的。 第一种是查看线程的名字，看是否已经存在了： using System.Diagnostics; namespace OnlyOneInstanceApp { class Program { static void Main(string[] args) { if (Process.GetProcessesByName (Process.GetCurrentProcess().ProcessName).Length &amp;gt; 1) {</description>
      
    </item>
    
  </channel>
</rss>